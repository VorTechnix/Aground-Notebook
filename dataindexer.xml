<data>
  <!-- Indexing Functions-->
  <action>
  //Index format: [blocksize:Int,complete:Int,...,process:Float]
  //Block number = index.indexOf(block start)+1;
  //Vars: _n = Name of data string; _i = _n+".base";
  //DataBase block MUST start AFTER a separator so separator.length should be added when indexOf or manual string length addition are used

  //Note DataBase function list
  function ndb(){
    trace( '//Note DataBase Settings: ndbs(); Returns the default blocksize and entry seperator.' );
    trace( '//Note DataBase ReIndexer: ndbri(player,stringname); Reindexes/initializes database.' );
    trace( '//Note DataBase Index Integerizer: ndbii(player,stringname.base); Turn index string into usable numbers.' );
    trace( '//Note DataBase Index Manager: ndbim(player,stringname,?write{block number},?value)' );
    trace( '//Reads and returns the index (initializing it if necessary) or (re)writes it if the main DB is edited.' );
  }
  //Note DataBase Settings: ndbs(); Returns the default blocksize and entry separator.
    function ndbs(){
      //Default blocksize:6 for testing... needs to be higher in implementation
      return {block:6,div:"|*"};
    }
  </action>
  <action>
  //Note DataBase ReIndexer: ndbri(player,stringname,?output array?); Reindexes/initializes database.
    function ndbri(player,_n,?f){
      data = player.getString(_n); sep = ndbs().block; bmrk = ndbs().div; crlr = 0; out = [sep,0];
      while( data.indexOf(bmrk,crlr) != -1 ) {
        //Sep counts down to the creation of a new block, Crlr counts up.
        --sep; crlr = data.indexOf(bmrk,crlr) + 2;
        //Create partition (start new block) if sep == 0.
        if( sep == 0 ){out.push(crlr);sep = ndbs().block;}
      }
      //Save end length and progress as float
      out.push( Std.parseFloat(""+data.length+"."+sep) );
      //Format output as array or string
      if( f !=null ) return out; return out.join(",");
    }
  </action>
  <action>
  //Note DataBase Index Integerizer: ndbii(player,stringname.base); Turn index string into usable numbers.
    function ndbii(player,_i){
      dex = [];
      for( e in player.getString(_i).split(",") ) {
        if( e.indexOf(".") != -1 ) dex.push(Std.parseFloat(e)); else dex.push(Std.parseInt(e));
      } return dex;
    }
  </action>
  <action>
  //Note DataBase Index Manager: ndbim(player,stringname,?write{block number},?value{added length});
  //Reads and returns the index (initializing it if necessary) or (re)writes it if the main DB is edited.
    function ndbim(player,_n,?w,?v){
    //Load index for data...
      dex = []; _i = _n+".base"; ndbs = ndbs();
      //If no index exists for the given data, reindex. Else initialize existing index for blocksize check.
      if( player.getString(_i)==null ){dex = ndbri(player,_n,1); player.setString(_i,dex.join(","));} else{dex = ndbii(player,_i);}
      //If blocksize is incorrect, reindex.
      if( dex[0] != ndbs.block ){dex = ndbri(player,_n,1); player.setString(_i,dex.join(","));}

    //If we aren't writing anything then save and return what we have.
    //Else drop blocksize element from array for further processing.
      if( w==null ) return dex; //else dex.remove(dex[0]); Make sure block # > 0

    //Get end-of-string data in usable format
      c = ( ""+dex.pop() ).split("."); c = [Std.parseInt(c[0]),Std.parseInt(c[1])];
    //Addition and edit cases
      switch [w, v] {
        //W cannot equal 0
        case [0, _]: trace("ERROR! "+errorNote(423).title+": "+errorNote(423).text+"ndbim");
        //Adition case
        case ["a", _]:{
          if( c[1] == 0 ){c[0]+=2; dex.push(c[0]); c[0]+=v; c[1]=ndbs.block;}
          else{c[0]+=(v+2); c[1]-=1;}
          dex.push(c.join(",")); player.setString(_i,dex.join(","));
        }
        //New deletion case
        case [_, "d"]:dex = ndbri(player,_n,1); player.setString(_i,dex.join(","));
        //Edit case
        case [_, _]:for( e in w + 1...dex.length + 1 ) dex[e]+=v; c[0]+=v; dex.push(c.join(",")); player.setString(_i,dex.join(","));
      }

    //And finally let's deal with deletions.
      //if( v=="d" ) dex = ndbri(player,_n,1); player.setString(_i,dex.join(","));

    }
  </action>
</data>
